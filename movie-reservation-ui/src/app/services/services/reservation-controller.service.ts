/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createReservation } from '../fn/reservation-controller/create-reservation';
import { CreateReservation$Params } from '../fn/reservation-controller/create-reservation';
import { deleteReservation } from '../fn/reservation-controller/delete-reservation';
import { DeleteReservation$Params } from '../fn/reservation-controller/delete-reservation';
import { getReservation } from '../fn/reservation-controller/get-reservation';
import { GetReservation$Params } from '../fn/reservation-controller/get-reservation';
import { getReservations } from '../fn/reservation-controller/get-reservations';
import { GetReservations$Params } from '../fn/reservation-controller/get-reservations';
import { getUserReservations } from '../fn/reservation-controller/get-user-reservations';
import { GetUserReservations$Params } from '../fn/reservation-controller/get-user-reservations';
import { updateReservation } from '../fn/reservation-controller/update-reservation';
import { UpdateReservation$Params } from '../fn/reservation-controller/update-reservation';

@Injectable({ providedIn: 'root' })
export class ReservationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getReservations()` */
  static readonly GetReservationsPath = '/reservations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReservations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservations$Response(params?: GetReservations$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getReservations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReservations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservations(params?: GetReservations$Params, context?: HttpContext): Observable<{
}> {
    return this.getReservations$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createReservation()` */
  static readonly CreateReservationPath = '/reservations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createReservation()` instead.
   *
   * This method doesn't expect any request body.
   */
  createReservation$Response(params: CreateReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createReservation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createReservation(params: CreateReservation$Params, context?: HttpContext): Observable<{
}> {
    return this.createReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateReservation()` */
  static readonly UpdateReservationPath = '/reservations/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateReservation()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateReservation$Response(params: UpdateReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateReservation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateReservation(params: UpdateReservation$Params, context?: HttpContext): Observable<{
}> {
    return this.updateReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteReservation()` */
  static readonly DeleteReservationPath = '/reservations/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReservation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReservation$Response(params: DeleteReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReservation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReservation(params: DeleteReservation$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getReservation()` */
  static readonly GetReservationPath = '/reservations/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReservation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservation$Response(params: GetReservation$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getReservation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReservation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReservation(params: GetReservation$Params, context?: HttpContext): Observable<{
}> {
    return this.getReservation$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getUserReservations()` */
  static readonly GetUserReservationsPath = '/reservations/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserReservations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserReservations$Response(params?: GetUserReservations$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getUserReservations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserReservations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserReservations(params?: GetUserReservations$Params, context?: HttpContext): Observable<{
}> {
    return this.getUserReservations$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
