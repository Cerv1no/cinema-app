/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createGenre } from '../fn/genre-controller/create-genre';
import { CreateGenre$Params } from '../fn/genre-controller/create-genre';
import { deleteGenre } from '../fn/genre-controller/delete-genre';
import { DeleteGenre$Params } from '../fn/genre-controller/delete-genre';
import { getAllGenres } from '../fn/genre-controller/get-all-genres';
import { GetAllGenres$Params } from '../fn/genre-controller/get-all-genres';
import { getGenre } from '../fn/genre-controller/get-genre';
import { GetGenre$Params } from '../fn/genre-controller/get-genre';
import { updateGenre } from '../fn/genre-controller/update-genre';
import { UpdateGenre$Params } from '../fn/genre-controller/update-genre';

@Injectable({ providedIn: 'root' })
export class GenreControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getGenre()` */
  static readonly GetGenrePath = '/genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGenre()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGenre$Response(params: GetGenre$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getGenre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGenre$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGenre(params: GetGenre$Params, context?: HttpContext): Observable<{
}> {
    return this.getGenre$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateGenre()` */
  static readonly UpdateGenrePath = '/genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateGenre()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGenre$Response(params: UpdateGenre$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateGenre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateGenre$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGenre(params: UpdateGenre$Params, context?: HttpContext): Observable<{
}> {
    return this.updateGenre$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteGenre()` */
  static readonly DeleteGenrePath = '/genre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteGenre()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGenre$Response(params: DeleteGenre$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteGenre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteGenre$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGenre(params: DeleteGenre$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteGenre$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createGenre()` */
  static readonly CreateGenrePath = '/genre';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createGenre()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createGenre$Response(params: CreateGenre$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createGenre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createGenre$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createGenre(params: CreateGenre$Params, context?: HttpContext): Observable<{
}> {
    return this.createGenre$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllGenres()` */
  static readonly GetAllGenresPath = '/genre/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllGenres()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllGenres$Response(params?: GetAllGenres$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllGenres(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllGenres$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllGenres(params?: GetAllGenres$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllGenres$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
