/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createRoom } from '../fn/room-controller/create-room';
import { CreateRoom$Params } from '../fn/room-controller/create-room';
import { deleteRoom } from '../fn/room-controller/delete-room';
import { DeleteRoom$Params } from '../fn/room-controller/delete-room';
import { getAllRooms } from '../fn/room-controller/get-all-rooms';
import { GetAllRooms$Params } from '../fn/room-controller/get-all-rooms';
import { getRoom } from '../fn/room-controller/get-room';
import { GetRoom$Params } from '../fn/room-controller/get-room';
import { updateRoom } from '../fn/room-controller/update-room';
import { UpdateRoom$Params } from '../fn/room-controller/update-room';

@Injectable({ providedIn: 'root' })
export class RoomControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getRoom()` */
  static readonly GetRoomPath = '/room/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoom$Response(params: GetRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoom(params: GetRoom$Params, context?: HttpContext): Observable<{
}> {
    return this.getRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateRoom()` */
  static readonly UpdateRoomPath = '/room/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRoom()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRoom$Response(params: UpdateRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRoom$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRoom(params: UpdateRoom$Params, context?: HttpContext): Observable<{
}> {
    return this.updateRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteRoom()` */
  static readonly DeleteRoomPath = '/room/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoom$Response(params: DeleteRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoom(params: DeleteRoom$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllRooms()` */
  static readonly GetAllRoomsPath = '/room';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRooms$Response(params?: GetAllRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRooms(params?: GetAllRooms$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createRoom()` */
  static readonly CreateRoomPath = '/room';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRoom()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRoom$Response(params: CreateRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRoom$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRoom(params: CreateRoom$Params, context?: HttpContext): Observable<{
}> {
    return this.createRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
