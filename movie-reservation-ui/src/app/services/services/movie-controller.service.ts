/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMovie } from '../fn/movie-controller/create-movie';
import { CreateMovie$Params } from '../fn/movie-controller/create-movie';
import { deleteMovie } from '../fn/movie-controller/delete-movie';
import { DeleteMovie$Params } from '../fn/movie-controller/delete-movie';
import { getAllMovies } from '../fn/movie-controller/get-all-movies';
import { GetAllMovies$Params } from '../fn/movie-controller/get-all-movies';
import { getMovie } from '../fn/movie-controller/get-movie';
import { GetMovie$Params } from '../fn/movie-controller/get-movie';
import { updateMovie } from '../fn/movie-controller/update-movie';
import { UpdateMovie$Params } from '../fn/movie-controller/update-movie';

@Injectable({ providedIn: 'root' })
export class MovieControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMovie()` */
  static readonly GetMoviePath = '/movie/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovie$Response(params: GetMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovie(params: GetMovie$Params, context?: HttpContext): Observable<{
}> {
    return this.getMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateMovie()` */
  static readonly UpdateMoviePath = '/movie/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMovie()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMovie$Response(params: UpdateMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMovie$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMovie(params: UpdateMovie$Params, context?: HttpContext): Observable<{
}> {
    return this.updateMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteMovie()` */
  static readonly DeleteMoviePath = '/movie/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMovie$Response(params: DeleteMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMovie(params: DeleteMovie$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createMovie()` */
  static readonly CreateMoviePath = '/movie';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMovie()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMovie$Response(params: CreateMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMovie$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMovie(params: CreateMovie$Params, context?: HttpContext): Observable<{
}> {
    return this.createMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllMovies()` */
  static readonly GetAllMoviesPath = '/movie/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMovies$Response(params?: GetAllMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMovies(params?: GetAllMovies$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
