/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createShowtime } from '../fn/showtime-controller/create-showtime';
import { CreateShowtime$Params } from '../fn/showtime-controller/create-showtime';
import { deleteShowtime } from '../fn/showtime-controller/delete-showtime';
import { DeleteShowtime$Params } from '../fn/showtime-controller/delete-showtime';
import { getAllShowtimes } from '../fn/showtime-controller/get-all-showtimes';
import { GetAllShowtimes$Params } from '../fn/showtime-controller/get-all-showtimes';
import { getShowtime } from '../fn/showtime-controller/get-showtime';
import { GetShowtime$Params } from '../fn/showtime-controller/get-showtime';
import { getShowtimesByMovieId } from '../fn/showtime-controller/get-showtimes-by-movie-id';
import { GetShowtimesByMovieId$Params } from '../fn/showtime-controller/get-showtimes-by-movie-id';
import { getShowtimesByRoomId } from '../fn/showtime-controller/get-showtimes-by-room-id';
import { GetShowtimesByRoomId$Params } from '../fn/showtime-controller/get-showtimes-by-room-id';
import { updateShowtime } from '../fn/showtime-controller/update-showtime';
import { UpdateShowtime$Params } from '../fn/showtime-controller/update-showtime';

@Injectable({ providedIn: 'root' })
export class ShowtimeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getShowtime()` */
  static readonly GetShowtimePath = '/showtimes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getShowtime()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShowtime$Response(params: GetShowtime$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getShowtime(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getShowtime$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShowtime(params: GetShowtime$Params, context?: HttpContext): Observable<{
}> {
    return this.getShowtime$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateShowtime()` */
  static readonly UpdateShowtimePath = '/showtimes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShowtime()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateShowtime$Response(params: UpdateShowtime$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateShowtime(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShowtime$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateShowtime(params: UpdateShowtime$Params, context?: HttpContext): Observable<{
}> {
    return this.updateShowtime$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteShowtime()` */
  static readonly DeleteShowtimePath = '/showtimes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteShowtime()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteShowtime$Response(params: DeleteShowtime$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteShowtime(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteShowtime$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteShowtime(params: DeleteShowtime$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteShowtime$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllShowtimes()` */
  static readonly GetAllShowtimesPath = '/showtimes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllShowtimes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllShowtimes$Response(params?: GetAllShowtimes$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllShowtimes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllShowtimes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllShowtimes(params?: GetAllShowtimes$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllShowtimes$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createShowtime()` */
  static readonly CreateShowtimePath = '/showtimes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createShowtime()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createShowtime$Response(params: CreateShowtime$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createShowtime(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createShowtime$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createShowtime(params: CreateShowtime$Params, context?: HttpContext): Observable<{
}> {
    return this.createShowtime$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getShowtimesByRoomId()` */
  static readonly GetShowtimesByRoomIdPath = '/showtimes/room/{roomId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getShowtimesByRoomId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShowtimesByRoomId$Response(params: GetShowtimesByRoomId$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getShowtimesByRoomId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getShowtimesByRoomId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShowtimesByRoomId(params: GetShowtimesByRoomId$Params, context?: HttpContext): Observable<{
}> {
    return this.getShowtimesByRoomId$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getShowtimesByMovieId()` */
  static readonly GetShowtimesByMovieIdPath = '/showtimes/movie/{movieId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getShowtimesByMovieId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShowtimesByMovieId$Response(params: GetShowtimesByMovieId$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getShowtimesByMovieId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getShowtimesByMovieId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getShowtimesByMovieId(params: GetShowtimesByMovieId$Params, context?: HttpContext): Observable<{
}> {
    return this.getShowtimesByMovieId$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
