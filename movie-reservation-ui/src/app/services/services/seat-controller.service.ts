/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createSeat } from '../fn/seat-controller/create-seat';
import { CreateSeat$Params } from '../fn/seat-controller/create-seat';
import { deleteSeat } from '../fn/seat-controller/delete-seat';
import { DeleteSeat$Params } from '../fn/seat-controller/delete-seat';
import { getAllSeatsOfRoom } from '../fn/seat-controller/get-all-seats-of-room';
import { GetAllSeatsOfRoom$Params } from '../fn/seat-controller/get-all-seats-of-room';
import { getSeatById } from '../fn/seat-controller/get-seat-by-id';
import { GetSeatById$Params } from '../fn/seat-controller/get-seat-by-id';
import { updateSeat } from '../fn/seat-controller/update-seat';
import { UpdateSeat$Params } from '../fn/seat-controller/update-seat';

@Injectable({ providedIn: 'root' })
export class SeatControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getSeatById()` */
  static readonly GetSeatByIdPath = '/seats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSeatById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSeatById$Response(params: GetSeatById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getSeatById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSeatById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSeatById(params: GetSeatById$Params, context?: HttpContext): Observable<{
}> {
    return this.getSeatById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateSeat()` */
  static readonly UpdateSeatPath = '/seats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSeat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSeat$Response(params: UpdateSeat$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateSeat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSeat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSeat(params: UpdateSeat$Params, context?: HttpContext): Observable<{
}> {
    return this.updateSeat$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteSeat()` */
  static readonly DeleteSeatPath = '/seats/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSeat()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSeat$Response(params: DeleteSeat$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteSeat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSeat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSeat(params: DeleteSeat$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteSeat$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createSeat()` */
  static readonly CreateSeatPath = '/seats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSeat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSeat$Response(params: CreateSeat$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createSeat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSeat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSeat(params: CreateSeat$Params, context?: HttpContext): Observable<{
}> {
    return this.createSeat$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllSeatsOfRoom()` */
  static readonly GetAllSeatsOfRoomPath = '/seats/{roomId}/seats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSeatsOfRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSeatsOfRoom$Response(params: GetAllSeatsOfRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllSeatsOfRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSeatsOfRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSeatsOfRoom(params: GetAllSeatsOfRoom$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllSeatsOfRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
